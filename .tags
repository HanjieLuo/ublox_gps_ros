!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BaudrateEnum	src/gps.cpp	/^int GPS::BaudrateEnum(int baud) {$/;"	f	class:GPS
GPS	include/gps.h	/^class GPS {$/;"	c
GPS	src/gps.cpp	/^GPS::GPS(void) {$/;"	f	class:GPS
GPS_H	include/gps.h	2;"	d
HEX	include/gps.h	66;"	d
MSG_CLASS	include/gps.h	61;"	d
MSG_HEAD1	include/gps.h	59;"	d
MSG_HEAD2	include/gps.h	60;"	d
MSG_ID	include/gps.h	62;"	d
OpenDevice	src/gps.cpp	/^bool GPS::OpenDevice() {$/;"	f	class:GPS
PAYLOAD_LENGTH	include/gps.h	63;"	d
ProcessData	src/gps.cpp	/^void GPS::ProcessData() {$/;"	f	class:GPS
Run	src/gps.cpp	/^void GPS::Run() {$/;"	f	class:GPS
UbxNavPvt	include/gps.h	/^struct UbxNavPvt {$/;"	s
baud_rate_	include/gps.h	/^	int baud_rate_;$/;"	m	class:GPS
cksum_A_	include/gps.h	/^	unsigned char cksum_A_;$/;"	m	class:GPS
cksum_B_	include/gps.h	/^	unsigned char cksum_B_;$/;"	m	class:GPS
data_	include/gps.h	/^	UbxNavPvt data_;$/;"	m	class:GPS
day	include/gps.h	/^	unsigned  char  day;        \/\/ d      Day of month, range 1..31 UTC$/;"	m	struct:UbxNavPvt
device_	include/gps.h	/^	int device_;$/;"	m	class:GPS
fixType	include/gps.h	/^	unsigned  char  fixType;    \/\/ -      GNSSfix Type, 0: no fix 1: dead reckoning only 2: 2D-fix 3: 3D-fix 4: GNSS + dead reckoning combined 5: time only fix$/;"	m	struct:UbxNavPvt
flags	include/gps.h	/^	char            flags;      \/\/ -      Fix status flags$/;"	m	struct:UbxNavPvt
flags2	include/gps.h	/^	unsigned  char  flags2;     \/\/ -      Additional flags$/;"	m	struct:UbxNavPvt
gSpeed	include/gps.h	/^	long            gSpeed;     \/\/ mm\/s   Ground Speed (2-D)$/;"	m	struct:UbxNavPvt
getData	src/gps.cpp	/^void GPS::getData(unsigned char buffer[], int buffer_size) {$/;"	f	class:GPS
getParams	src/gps.cpp	/^void GPS::getParams() {$/;"	f	class:GPS
hAcc	include/gps.h	/^	unsigned  long  hAcc;       \/\/ mm     Horizontal Accuracy Estimate$/;"	m	struct:UbxNavPvt
hMSL	include/gps.h	/^	long            hMSL;       \/\/ mm     Height above mean sea level$/;"	m	struct:UbxNavPvt
headAcc	include/gps.h	/^	unsigned  long  headAcc;    \/\/ deg    Heading Accuracy Estimate (1e-5)$/;"	m	struct:UbxNavPvt
headMot	include/gps.h	/^	long            headMot;    \/\/ deg    Heading of motion 2-D (1e-5)$/;"	m	struct:UbxNavPvt
headVeh	include/gps.h	/^	long            headVeh;    \/\/deg     Heading of vehicle (2-D)$/;"	m	struct:UbxNavPvt
height	include/gps.h	/^	long            height;     \/\/ mm     Height above Ellipsoid$/;"	m	struct:UbxNavPvt
hour	include/gps.h	/^	unsigned  char  hour;       \/\/ h      Hour of day, range 0..23 UTC$/;"	m	struct:UbxNavPvt
iTOW	include/gps.h	/^	unsigned  long  iTOW;       \/\/ ms     GPS time of week of the navigation epoch. See the description of iTOW for details.$/;"	m	struct:UbxNavPvt
lat	include/gps.h	/^	long            lat;        \/\/ deg    Latitude (1e-7)$/;"	m	struct:UbxNavPvt
lon	include/gps.h	/^	long            lon;        \/\/ deg    Longitude (1e-7)$/;"	m	struct:UbxNavPvt
magAcc	include/gps.h	/^	unsigned  short magAcc;     \/\/deg     Magnetic declination accuracy$/;"	m	struct:UbxNavPvt
magDec	include/gps.h	/^	short           magDec;     \/\/deg     Magnetic declination$/;"	m	struct:UbxNavPvt
main	src/ublox_gps_ros_node.cpp	/^int main(int argc, char** argv) {$/;"	f
min	include/gps.h	/^	unsigned  char  min;        \/\/ min    Minute of hour, range 0..59 UTC$/;"	m	struct:UbxNavPvt
month	include/gps.h	/^	unsigned  char  month;      \/\/ month  Month, range 1..12 UTC$/;"	m	struct:UbxNavPvt
msg_cksum_A_	include/gps.h	/^	unsigned char msg_cksum_A_;$/;"	m	class:GPS
msg_cksum_B_	include/gps.h	/^	unsigned char msg_cksum_B_;$/;"	m	class:GPS
msg_class_	include/gps.h	/^	unsigned char msg_class_;$/;"	m	class:GPS
msg_id_	include/gps.h	/^	unsigned char msg_id_;$/;"	m	class:GPS
msg_index_	include/gps.h	/^	int msg_index_;$/;"	m	class:GPS
nano	include/gps.h	/^	long            nano;       \/\/ ns     Fraction of second, range -1e9..1e9 UTC$/;"	m	struct:UbxNavPvt
numSV	include/gps.h	/^	unsigned  char  numSV;      \/\/ -      Number of satellites used in Nav Solution$/;"	m	struct:UbxNavPvt
pDOP	include/gps.h	/^	unsigned  short pDOP;       \/\/ -      Position DOP (0.01)$/;"	m	struct:UbxNavPvt
payload_	include/gps.h	/^	unsigned char payload_[92];$/;"	m	class:GPS
payload_length_	include/gps.h	/^	int payload_length_;$/;"	m	class:GPS
port_	include/gps.h	/^	std::string port_;$/;"	m	class:GPS
reserved1	include/gps.h	/^	unsigned  char  reserved1[6];$/;"	m	struct:UbxNavPvt
sAcc	include/gps.h	/^	unsigned  long  sAcc;       \/\/ mm\/s   Speed Accuracy Estimate$/;"	m	struct:UbxNavPvt
sec	include/gps.h	/^	unsigned  char  sec;        \/\/ s      Seconds of minute, range 0..60 UTC$/;"	m	struct:UbxNavPvt
step_	include/gps.h	/^	int step_;$/;"	m	class:GPS
tAcc	include/gps.h	/^	unsigned  long  tAcc;       \/\/ ns     Time accuracy estimate UTC$/;"	m	struct:UbxNavPvt
vAcc	include/gps.h	/^	unsigned  long  vAcc;       \/\/ mm     Vertical Accuracy Estimate$/;"	m	struct:UbxNavPvt
valid	include/gps.h	/^	char            valid;      \/\/ -      Validity Flags (see graphic below)$/;"	m	struct:UbxNavPvt
velD	include/gps.h	/^	long            velD;       \/\/ mm\/s   NED down velocity$/;"	m	struct:UbxNavPvt
velE	include/gps.h	/^	long            velE;       \/\/ mm\/s   NED east velocity$/;"	m	struct:UbxNavPvt
velN	include/gps.h	/^	long            velN;       \/\/ mm\/s   NED north velocity$/;"	m	struct:UbxNavPvt
year	include/gps.h	/^	unsigned  short year;       \/\/ y      Year UTC$/;"	m	struct:UbxNavPvt
~GPS	src/gps.cpp	/^GPS::~GPS() {$/;"	f	class:GPS
